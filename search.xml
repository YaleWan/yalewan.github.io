<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gitlab-ci</title>
      <link href="/2019/12/27/gitlab-ci/"/>
      <url>/2019/12/27/gitlab-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>持续集成(Continuous integration，简称CI)是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。 每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p><p>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。持续集成的目的，可以更高效率的快速迭代软件产品，同时还能保证高质量。它可以保障，我们把代码合并到主干之前，能够充分的自动化测试，单元测试，只要有一个单元测试未通过，则无法集成到主干。 </p><p>但是这样会导致，开发人员要多次进行项目构建，浪费了很多开发时间，所以需要将构建等过程交由自动化的方式去处理，于是就有了持续集成系统。</p><p>Gitlab CI就是这样一个工具，可以在用户Push、创建tag，或者手动触发等方式去执行指定的脚本，从而进行代码的构建、发布等操作，和Gitlab相结合，可以无缝的完成代码管理和集成。</p><h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p>让一个gitlab项目具备CI能力，分为两部分，一个是CI的配置文件.gitlab-ci.yml，一个是gitlab-runner。</p><p>.gitlab-ci.yml是描述当前项目是以怎样的方式进行构建和部署，需要将它放在项目的根目录。在任何的push操作，GitLab都会寻找.gitlab-ci.yml文件，并对此次commit开始jobs，jobs的内容来源于.gitlab-ci.yml文件。</p><p>gitlab runner 是用来执行脚本操作的，它和gitlab是分开的，可以单独部署。</p><h2 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h2><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td>Pipeline</td><td>相当于一次构建任务，里面可以包含多个Stages(构建阶段)，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。</td></tr><tr><td>Stages</td><td>构建阶段，里面可以包含多个Jobs（构建工作）。<br><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始；</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功；</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败。</li></ul></td></tr><tr><td>Jobs</td><td>构建工作，每个Job中会执行很多脚本script。<br> <ul><li>相同 Stage 中的 Jobs 会并行执行；</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功；</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li></ul></td></tr></tbody></table><p><img src="https://yhpics.oss-cn-beijing.aliyuncs.com/img/blog/9183289-3ef19546e251d4ea.jpg" alt=""></p><p><img src="https://yhpics.oss-cn-beijing.aliyuncs.com/img/blog/9183289-96c931ed61edb9d2.jpg" alt=""></p><p><img src="https://yhpics.oss-cn-beijing.aliyuncs.com/img/blog/9183289-f32431f501080d88.jpg" alt=""></p><p>参考下面的配置文件：</p><pre class=" language-yml"><code class="language-yml">cache:  key: ${CI_BUILD_REF_NAME}  paths:    - node_modules/# 构建阶段    stages:  - install_deps  - build  - deploybefore_script:  - export PATH=$PATH:/home/software/node-v8.9.0-linux-x64/bin# 安装依赖install_deps:  stage: install_deps  when: manual  allow_failure: false  only:    - master  script:    - npm install# 部署生产服务器build:  stage: build  only:    - master  script:    - gitbook build # 部署生产服务器deploy:  stage: deploy  only:    - master  script:    - node sftp.js</code></pre><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>每个Job开始的时候，Runner 都会删掉.gitignore 里面的文件。cache用于指定一些需要在任务间进行缓存的文件和目录，你只能使用项目工作空间内的路径来指定缓存。常用的就是讲node_modules中的代码进行缓存，不要重复的安装。</p><blockquote><p>1) cache可以全局，也可以属于某个stage。<br><br>2) cache可以指定路径，也可以是整个git项目。<br><br>3) 管理界面会有按钮“Clear Runner caches button”，会直接删除已经缓存的数据。<br></p></blockquote><h3 id="before-script"><a href="#before-script" class="headerlink" title="before_script"></a>before_script</h3><p>定义任何 Jobs 运行前都会执行的命令。</p><h2 id="2、gitlab-runner"><a href="#2、gitlab-runner" class="headerlink" title="2、gitlab-runner"></a>2、gitlab-runner</h2><p>Gitlab Runner是一个开源的项目，用来运行你的jobs，然后发送运行的结果到Gitlab。它和Gitlab CI管理使用，是Gitlab中一个开源的持续集成服务。GitLab8.0以后的版本是默认集成了GitLab-CI并且默认启用的。</p><p>GitLab-Runner是配合GitLab-CI进行使用的。一般地，GitLab里面的每一个工程都会定义一个属于这个工程的软件集成脚本，用来自动化地完成一些软件集成工作。当这个工程的仓库代码发生变动时，比如有人push了代码，GitLab就会将这个变动通知GitLab-CI。这时GitLab-CI会找出与这个工程相关联的Runner，并通知这些Runner把代码更新到本地并执行预定义好的执行脚本。</p><p><img src="https://i.imgur.com/5AX3UVI.jpg" alt="image"></p><p>每个Runner都可以分开部署到独立的机器上，同一个主机上也可以有多个Runner，Runner运行不会影响Gitlab的运行。所以，GitLab-Runner就是一个用来执行软件集成脚本的东西。你可以想象一下：Runner就像一个个的工人，而GitLab-CI就是这些工人的一个管理中心，所有工人都要在GitLab-CI里面登记注册，并且表明自己是为哪个工程服务的。当相应的工程发生变化时，GitLab-CI就会通知相应的工人执行软件集成脚本。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考<a href="https://docs.gitlab.com/runner/install/index.html" target="_blank" rel="noopener">Gitlab Runner网站</a>。我是在Centos上面安装，参考的是<a href="https://docs.gitlab.com/runner/install/linux-repository.html" target="_blank" rel="noopener">通过代码仓库安装的方式</a>。</p><pre><code># 1 Add GitLab’s official repository:# For RHEL/CentOS/Fedoracurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash# 2 Install the latest version of GitLab Runner# For RHEL/CentOS/Fedorasudo yum install gitlab-runner</code></pre><h3 id="注册CI服务"><a href="#注册CI服务" class="headerlink" title="注册CI服务"></a>注册CI服务</h3><p>现在我们需要将Gitlab CI和Gitlab Runner关联起来。</p><p>第一步是将.gitlab-ci.yml文件上传到项目的根目录。</p><p>第二步是到Gitlab Runner安装的服务器通过下面的命令注册一个Runner，注册步骤如下。</p><pre><code># https://docs.gitlab.com/runner/register/index.htmlsudo gitlab-runner register</code></pre><p>输入Gitlab的根目录地址</p><pre><code>Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )http://182.254.153.226/</code></pre><p>请输入注册Runner所需的token，这个是每个项目唯一的</p><pre><code>Please enter the gitlab-ci token for this runnerxxxx-xx-x-x-xxx</code></pre><p>输入该Runner的一个描述信息，可以在Gitlab中修改</p><pre><code>Please enter the gitlab-ci description for this runnermy-runner</code></pre><p>输入Runner相关联的tags，Gitlab项目可以指定tags来选择使用哪个Runner</p><pre><code>Please enter the gitlab-ci tags for this runner (comma separated):my-tag,another-tag</code></pre><p>输入执行Runner的方式，我们目前都是用的shell</p><pre><code>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:shell</code></pre><p>url和token获取的方式，根据Gitlab的版本不同，略有不同，我们的Gitlab版本是10.4.2-ee，获取方式如下图所示：</p><p><img src="https://i.imgur.com/KxmBeaY.jpg" alt="image"></p><p><img src="https://i.imgur.com/3gJT28R.jpg" alt="image"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此为止，我们就可以在当前项目中使用CI服务了，但是我们还可以控制什么时候触发一个Pipeline，后面我们会详细讲解常用的几种方式。</p><h1 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h1><p>默认每次我们Push的时候都会触发Gitlab CI去运行一个Pipeline，但是有的时候我们希望可以控制触发Pipeline的时机，以及控制是自动执行还是手动执行。</p><p>首先我们知道Pipeline中包含多个Stage，Stage中又分为多个Job来执行，.gitlab-ci.yml中我们对每个Job进行行为配置，来控制执行的时机，从而控制Pipeline执行的时机。</p><h2 id="only"><a href="#only" class="headerlink" title="only"></a>only</h2><p>首先，是only和except配置，两个参数说明了job什么时候将会被创建，我们主要在使用only，下面是only可用的一些值。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>branches</strong></td><td>当一个分支被push上来，可以是一个具体的分支名，比如master，release等。</td></tr><tr><td><strong>tags</strong></td><td>当一个打了tag的分支被push上来</td></tr><tr><td>api</td><td>当一个pipline被piplines api所触发调起，详见piplines api</td></tr><tr><td>external</td><td>当使用了GitLab以外的CI服务</td></tr><tr><td>pipelines</td><td>针对多项目触发器而言，当使用CI_JOB_TOKEN并使用gitlab所提供的api创建多个pipelines的时候</td></tr><tr><td>pushes</td><td>当pipeline被用户的git push操作所触发的时候</td></tr><tr><td>schedules</td><td>针对预定好的pipline而言（每日构建一类~，具体请看链接）</td></tr><tr><td>triggers</td><td>用token创建piplines的时候</td></tr><tr><td><strong>web</strong></td><td>在GitLab页面上Pipelines标签页下，你按了run pipline的时候</td></tr><tr><td><em>merge_requests</em></td><td>创建或者更新merge request的时候，但是<em>只有Gitlab 11.6以上的版本可以用</em></td></tr></tbody></table><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p>web的意思就是不要自动创建Job，要用户自己手动去Run Pipeline的时候再创建。这种方式主要用在我们希望手动去触发Pipeline的时候，流程可以由我们控制。而且，可以选择指定的分支去上线，这样可以通过git diff出和master分支不同的代码，然后上传七牛。主要是为了解决<a href="http://www.che300.com图片和代码太多不方便一次性全部上线的问题。" target="_blank" rel="noopener">www.che300.com图片和代码太多不方便一次性全部上线的问题。</a></p><p>这种项目我们还可以开启Settings–&gt;General–&gt;Merge request settings中的Only allow merge requests to be merged if the pipeline succeeds功能。这样当当前项目提交merge的同时，创建一个pipeline，在Pipeline没有完成之前，merge request不能合并，这样会减少合并代码之后不好diff上线代码的问题。</p><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p>当有代码合并到master分支的时候，就会创建该Job，从而在Pipeline页面就会看到一个新的Pipeline。比如fe-wiki项目就是使用master分支发布的，我们一旦更新了master代码，会执行指定的Job，比如install、build，然后将编译好的Gitbook发送到指定的服务器上。</p><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>当有代码合并到release分支的时候，就会创建该Job，从而在Pipeline页面就会看到一个新的Pipeline。之所以使用release分支发布，而不是master分支，原因是我们在使用quploader的git模式上线的时候，代码必须和远程master分支diff出不同的代码，再上线，如果先合并到master分支了，就没办法去diff了。所以，pics和libs项目，我们都是用了release分支去发布了。</p><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><p>这种方式类似于web，只不过我们需要先打一个tag，然后就会自动创建Job和Pipeline，然后就可以发布上线。这样有一个好处就是方便后续回滚的时候，我们可以直接基于某个tag去重新发布代码。</p><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>前面提到我们可以做到当Job创建之后自动或者手动执行，依靠的就是when，when参数是确定该job在失败或者没失败的时候执行不执行的参数。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>on_success</td><td>只有在之前场景执行的所有作业成功的时候才执行当前job，这个就是默认值，我们用最小配置的时候他默认就是这个值，所以失败的时候pipeline会停止执行后续任务</td></tr><tr><td>on_failure</td><td>只有在之前场景执行的任务中至少有一个失败的时候才执行</td></tr><tr><td>always</td><td>不管之前场景阶段的状态，总是执行</td></tr><tr><td>manual</td><td>~手动执行job的时候触发（webui上点的）。请阅读<a href="https://segmentfault.com/a/1190000011890710#articleHeader9" target="_blank" rel="noopener">manual action</a></td></tr></tbody></table><p>下面的配置就可以做到，当前Job手动执行，而且执行成功之前，不会执行后续的Job。用到了allow_failure。</p><pre><code>when: manualallow_failure: false</code></pre><p>allow_failure被用于当你想允许job失败而不阻塞剩下的CI套件执行的时候，失败的job不会影响到commit状态(pipelines执行完会在commit上标记失败或成功状态，但是不会阻止commit提交)。</p><p>当allow_failure为true，并且job失败了，pipline将会置绿或者置成功显示，但是你会在commit页面或者job页面看到一条“CI build passed with warnings”的警告信息哈。</p><p>当allow_failure为false，当前Job执行成功（注意是成功不是完成）之前，后续的Job是不会执行的，从而达到了阻塞所有后续Job的功能。</p><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>我们在使用Gitlab Runner的时候，在服务器上会创建一个gitlab-runner的用户，它的用户权限是受限的，在实际使用中，发现过npm install的时候总是失败的情况，因此需要给它赋予Root权限。</p><p>我们需要对/etc/sudoers 文件进行修改，增加gitlab-runner用户的运行sudo的能力。</p><pre><code>sudo EDITOR=vi visudovi /etc/sudoers</code></pre><p>在文件最后的位置增加下面的代码，然后保存</p><pre><code>gitlab-runner ALL=(ALL) NOPASSWD: ALL</code></pre><p>然后就可以使用 sudo npm install 来安装对应的npm依赖。</p><blockquote><p>【注】：使用sudo生成的文件都有可能会出现删除失败的情况。比如npm run dist 生成的dist文件。以及当使用“Clear Runner caches button”按钮删除导致的node_modules目录，也会出现删除不了的问题。</p></blockquote><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><p><img src="https://yhpics.oss-cn-beijing.aliyuncs.com/img/blog/projs.png" alt=""></p><h1 id="大总结"><a href="#大总结" class="headerlink" title="大总结"></a>大总结</h1><p>基于Gitlab CI 和 Gitlab Runner来实现了相关项目的持续集成以及自动部署。后续可以根据需要的情况，来合理配置。</p>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化常用技术</title>
      <link href="/2019/12/24/zu-jian-hua-chang-yong-ji-zhu/"/>
      <url>/2019/12/24/zu-jian-hua-chang-yong-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件化常用技术"><a href="#Vue组件化常用技术" class="headerlink" title="Vue组件化常用技术"></a>Vue组件化常用技术</h1><h2 id="组件传值、通信"><a href="#组件传值、通信" class="headerlink" title="组件传值、通信"></a>组件传值、通信</h2><h3 id="父组件-gt-子组件"><a href="#父组件-gt-子组件" class="headerlink" title="父组件 =&gt; 子组件:"></a>父组件 =&gt; 子组件:</h3><ul><li>属性props </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// child</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>HelloWorld msg<span class="token operator">=</span><span class="token string">"Welcome to Your Vue.js App"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><ul><li>引用refs </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>HelloWorld ref<span class="token operator">=</span><span class="token string">"hw"</span><span class="token operator">/</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hw<span class="token punctuation">.</span>xx</code></pre><h3 id="子组件-gt-父组件-自定义事件"><a href="#子组件-gt-父组件-自定义事件" class="headerlink" title="子组件 =&gt; 父组件:自定义事件"></a>子组件 =&gt; 父组件:自定义事件</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// child </span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> good<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>Cart @add<span class="token operator">=</span><span class="token string">"cartAdd($event)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">></span></code></pre><h3 id="兄弟组件-通过共同祖辈组件"><a href="#兄弟组件-通过共同祖辈组件" class="headerlink" title="兄弟组件:通过共同祖辈组件"></a>兄弟组件:通过共同祖辈组件</h3><blockquote><p>通过共同的祖辈组件搭桥，$parent或$root。 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// brother1</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// brother2 </span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span></code></pre><h3 id="祖先和后代之间"><a href="#祖先和后代之间" class="headerlink" title="祖先和后代之间"></a>祖先和后代之间</h3><ul><li>provide/inject:能够实现祖先给后代传值 </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ancestor</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// descendant</span>inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span></code></pre><ul><li>dispatch:后代给祖先传值 </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个dispatch方法，指定要派发事件名称和数据 </span><span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent    <span class="token comment" spellcheck="true">// 只要还存在父元素就继续往上查找 </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父元素用$emit触发 </span>        parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归查找父元素</span>        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用，HelloWorld.vue</span><span class="token operator">&lt;</span>h1 @click<span class="token operator">=</span><span class="token string">"dispatch('hello', 'hello,world')"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token comment" spellcheck="true">// App.vue</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span></code></pre><h3 id="任意两个组件之间-事件总线-或-vuex"><a href="#任意两个组件之间-事件总线-或-vuex" class="headerlink" title="任意两个组件之间:事件总线 或 vuex"></a>任意两个组件之间:事件总线 或 vuex</h3><ul><li>事件总线:创建一个Bus类负责事件派发、监听和回调管理 </li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Bus:事件派发、监听和回调管理 </span><span class="token keyword">class</span> <span class="token class-name">Bus</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//   eventName1:[fn1,fn2],</span>        <span class="token comment" spellcheck="true">// eventName2:[fn3,fn4], // }</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">$on</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token function">$emit</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// child1</span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// child2 </span><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span></code></pre><ul><li>vuex:创建唯一的全局数据管理者store，通过它管理数据并通知组件状态变更 </li></ul><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><blockquote><p>Vue 2.6.0之后采用全新v-slot语法取代之前的slot、slot-scope </p></blockquote><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// comp1</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>comp<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// comp2</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>Comp2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 默认插槽用<span class="token keyword">default</span>做参数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span><span class="token keyword">default</span><span class="token operator">></span>具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 具名插槽用插槽名做参数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>content<span class="token operator">></span>内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Comp2<span class="token operator">></span></code></pre><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// comp3</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>slot <span class="token punctuation">:</span>foo<span class="token operator">=</span><span class="token string">"foo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// parent</span><span class="token operator">&lt;</span>Comp3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 把v<span class="token operator">-</span>slot的值指定为作用域上下文对象 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"ctx"</span><span class="token operator">></span>        来自子组件数据<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Comp3<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机生成不重复值</title>
      <link href="/2019/12/23/yong-di-gui-suan-fa-shi-xian-shu-zu-chang-du-wei-5-qie-yuan-su-de-sui-ji-shu-zai-2-32-jian-bu-chong-fu-de-zhi/"/>
      <url>/2019/12/23/yong-di-gui-suan-fa-shi-xian-shu-zu-chang-du-wei-5-qie-yuan-su-de-sui-ji-shu-zai-2-32-jian-bu-chong-fu-de-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值"><a href="#用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值" class="headerlink" title="用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值"></a>用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值</h2><p><strong>描述</strong>：</p><ul><li>生成一个长度为5的空数组arr</li><li>生成一个（2－32）之间的随机整数rand</li><li>把随机数rand插入到数组arr内，如果数组arr内已存在与rand相同的数字，则重新生成随机数rand并插入到arr内[需要使用递归实现，不能使用for/while等循环]</li><li>最终输出一个长度为5，且内容不重复的数组arr。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> length<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> length <span class="token operator">?</span> arr <span class="token punctuation">:</span> <span class="token function">buildArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> length<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">buildArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> alg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去字符串中空格</title>
      <link href="/2019/12/23/xie-yi-ge-fang-fa-qu-diao-zi-fu-chuan-zhong-de-kong-ge/"/>
      <url>/2019/12/23/xie-yi-ge-fang-fa-qu-diao-zi-fu-chuan-zhong-de-kong-ge/</url>
      
        <content type="html"><![CDATA[<h2 id="写一个方法去掉字符串中的空格"><a href="#写一个方法去掉字符串中的空格" class="headerlink" title="写一个方法去掉字符串中的空格"></a>写一个方法去掉字符串中的空格</h2><ul><li>写一个方法去掉字符串中的空格</li><li>要求传入不同的类型分别能去掉前、后、前后、中间的空格</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'  s t  r  '</span><span class="token keyword">const</span> POSITION <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  left<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  right<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  both<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  center<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  all<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> position <span class="token operator">=</span> POSITION<span class="token punctuation">.</span>both<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>POSITION<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unexpected position value'</span><span class="token punctuation">)</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">.</span>both<span class="token punctuation">)</span><span class="token punctuation">:</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\w\s+\w/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\w)(\s+)(\w)/</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`$1$3`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">(</span>POSITION<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token punctuation">:</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> str<span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  |s t  r| </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> alg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件总线bus解决兄弟组件之间的传值</title>
      <link href="/2019/12/23/zong-xian-bus-jie-jue-xiong-di-zu-jian-chuan-zhi/"/>
      <url>/2019/12/23/zong-xian-bus-jie-jue-xiong-di-zu-jian-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="事件总线bus解决兄弟组件之间的传值"><a href="#事件总线bus解决兄弟组件之间的传值" class="headerlink" title="事件总线bus解决兄弟组件之间的传值"></a>事件总线bus解决兄弟组件之间的传值</h2><p>实际运用：</p><p>封装一个<code>Bus.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> Bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Bus </code></pre><p>在组件调用时引入</p><p>组件一：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'./Bus'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token punctuation">.</span>      Bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre><p>组件二：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'./Bus'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">,</span> content <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出字符串中连续出现最多的字符和个数</title>
      <link href="/2019/12/23/zhao-chu-zi-fu-chuan-zhong-lian-xu-chu-xian-zui-duo-de-zi-fu-he-ge-shu/"/>
      <url>/2019/12/23/zhao-chu-zi-fu-chuan-zhong-lian-xu-chu-xian-zui-duo-de-zi-fu-he-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="找出字符串中连续出现最多的字符和个数"><a href="#找出字符串中连续出现最多的字符和个数" class="headerlink" title="找出字符串中连续出现最多的字符和个数"></a>找出字符串中连续出现最多的字符和个数</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(\w)\1*/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>length <span class="token operator">===</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre<span class="token punctuation">[</span>curr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> alg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vue.observable进行状态管理</title>
      <link href="/2019/12/23/shi-yong-vue.observable-jin-xing-zhuang-tai-guan-li/"/>
      <url>/2019/12/23/shi-yong-vue.observable-jin-xing-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Vue-observable-进行状态管理"><a href="#使用Vue-observable-进行状态管理" class="headerlink" title="使用Vue.observable()进行状态管理"></a>使用Vue.observable()进行状态管理</h1><p><code>Vue.observable(object)</code>是vue.js 2.6新增加的一个api，通过这个api我们可以应对一些简单的跨组件数据状态共享的情况。</p><p>来看一下实际应用：</p><ul><li><p><strong>首先先创建一个store.js，包含一个store 和一个 mutations，分别用来指向数据和处理方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//store.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> store <span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> mutations<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>        store<span class="token punctuation">.</span>count<span class="token operator">=</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        store<span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>然后在组件Home.vue中引用，在组件里使用数据和方法：</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Home.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>home<span class="token operator">-</span>header<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>home<span class="token operator">-</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"setCount(count+1)"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"setCount(count-1)"</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>store中count：<span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName(name1)"</span><span class="token operator">></span>父页面修改name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>store中name：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/detail"</span> <span class="token operator">></span><span class="token operator">&lt;</span>h5<span class="token operator">></span>跳转到详情页<span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> HomeHeader <span class="token keyword">from</span> <span class="token string">'../components/HomeHeader'</span>   <span class="token keyword">import</span> <span class="token punctuation">{</span>store<span class="token punctuation">,</span>mutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          name1<span class="token punctuation">:</span><span class="token string">'主页的name'</span>       <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        HomeHeader     <span class="token punctuation">}</span><span class="token punctuation">,</span>      computed<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> store<span class="token punctuation">.</span>count          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> store<span class="token punctuation">.</span>name          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>          setCount<span class="token punctuation">:</span>mutations<span class="token punctuation">.</span>setCount<span class="token punctuation">,</span>          changeName<span class="token punctuation">:</span>mutations<span class="token punctuation">.</span>changeName            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sleep函数</title>
      <link href="/2019/12/23/xie-yi-ge-sleep-zan-ting-han-shu/"/>
      <url>/2019/12/23/xie-yi-ge-sleep-zan-ting-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="写一个sleep-暂停-函数"><a href="#写一个sleep-暂停-函数" class="headerlink" title="写一个sleep(暂停)函数"></a>写一个sleep(暂停)函数</h1><ul><li>不要写同步的暂停函数。它会让你的程序卡死。</li><li>写一个异步的暂停函数，这样可以在任何 <code>async function</code> 中暂停，且只暂停这一部分代码。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// … do something …</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// … do something else …</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> alg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react的基本使用二</title>
      <link href="/2019/12/23/react-de-ji-ben-shi-yong-er/"/>
      <url>/2019/12/23/react-de-ji-ben-shi-yong-er/</url>
      
        <content type="html"><![CDATA[<h1 id="react-的基本使用"><a href="#react-的基本使用" class="headerlink" title="react 的基本使用"></a>react 的基本使用</h1><h2 id="1-基本构造"><a href="#1-基本构造" class="headerlink" title="1. 基本构造"></a>1. 基本构造</h2><p>react 最基本的构造如下</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>  <span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../build/react.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../build/react-dom.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../build/browser.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/babel"</span><span class="token operator">></span>      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p> 我们所引进来的三个库，其中<code>react.js</code>是React的核心库，<code>react-dom.js</code>是提供与DOM 相关的功能，<code>browser.js</code>的作用是将JSX语法转为JavaScript语法。 其中<code>text/babel</code>这是因为React独有的JSX语法，跟JavaScript不兼容。</p><h2 id="2-JSX语法"><a href="#2-JSX语法" class="headerlink" title="2. JSX语法"></a>2. JSX语法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'mouse'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span>    animals<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>animal<span class="token punctuation">}</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这行例子，提现了 JSX的基本规则，遇到<code>&lt;</code>标签开头，就已HTML规则解析，遇到<code>{</code>标签开头，就用JavaScript规则解析。如果变量是一个数据，JSX会默认将所有数据成员展开。</p><h2 id="3-组件"><a href="#3-组件" class="headerlink" title="3. 组件"></a>3. 组件</h2><p>React可以将代码封装成组件，然后像插入HTML标签一样，在网页中插入这个组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">NotesList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>ol<span class="token operator">></span>      <span class="token punctuation">{</span>        React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span>child<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>NotesList name<span class="token operator">=</span><span class="token string">'john'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>NotesList<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：组件类名必须大写，组件类只能包含一个顶层标签，否则会报错，所有的组件类必须有自己的render方法，用于输出组件。</p><p>组件标签和HTML标签一致，可以添加属性，比如<code>NotesList</code>组件添加了一个<code>name</code>属性。该属性可以在属性类上通过<code>this.props</code>对象上获取,比如<code>name</code>通过<code>this.props.name</code>获取。</p><p><code>this.props.children</code>属性表示组件所有的子节点，比如上方<code>NotesList</code>组件有两个span子节点，他们可以在组件类中通过<code>this.props. children</code>获取。</p><p><strong>注意</strong><code>this.props.children</code>的值有三种可能，</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react的基本使用一</title>
      <link href="/2019/12/23/react-de-ji-ben-shi-yong-yi/"/>
      <url>/2019/12/23/react-de-ji-ben-shi-yong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="react-的基本使用"><a href="#react-的基本使用" class="headerlink" title="react 的基本使用"></a>react 的基本使用</h1><h2 id="1-jsx语法"><a href="#1-jsx语法" class="headerlink" title="1. jsx语法"></a>1. jsx语法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>这种语法既不是字符串也不是html，他被称为jsx</p><h2 id="2-元素的渲染"><a href="#2-元素的渲染" class="headerlink" title="2. 元素的渲染"></a>2. 元素的渲染</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-组件和props"><a href="#3-组件和props" class="headerlink" title="3. 组件和props"></a>3. 组件和props</h2><ul><li><p><strong>函数组件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>ES6中的class组件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>渲染组件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Sara"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>自定义组件的属性，他会将jsx所接收的属性转换为单个对象传递给组件，这个对象被称之为<code>props1</code></p></li></ul><h2 id="4-state-amp-生命周期"><a href="#4-state-amp-生命周期" class="headerlink" title="4. state &amp; 生命周期"></a>4. state &amp; 生命周期</h2><p>  封装时钟</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Clock date<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  虽然这样也能实现计时器的功能，但是他忽略了一个关键的技术细节：clock组件需要设置一个计时器，并且需要每秒更新UI， 在理想情况下，我们希望只编写一次代码，便可以让clock组件自我更新。</p><p>  我们需要在 <code>Clock</code> 组件中添加 “state” 来实现这个功能。</p><p>  State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。</p><ul><li><p><strong>将函数组件转换成class组件</strong></p><p>  通过以下五步将 <code>Clock</code> 的函数组件转成 class 组件：</p><ul><li>创建一个同名的 <code>ES6 class</code>，并且继承于 <code>React.Component</code>。</li><li>添加一个空的 <code>render()</code> 方法</li><li>将函数体移动到 <code>render()</code> 方法之中。</li><li>在 <code>render()</code> 方法中使用 <code>this.props</code> 替换 <code>props</code>。</li><li>删除剩余的空函数声明。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>向 class 组件中添加局部的 state</strong></p><p>我们通过以下三步将 <code>date</code> 从 props 移动到 state 中：</p><ul><li><p>把 <code>render()</code> 方法中的 <code>this.props.date</code> 替换成 <code>this.state.date</code></p></li><li><p>添加一个 <code>class 构造函数</code>，然后在该函数中为 <code>this.state</code> 赋初值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>移除 <code>&lt;Clock /&gt;</code>元素中的 <code>date</code> 属性:</p><pre class=" language-js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Clock <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><strong>将生命周期方法添加到 Class 中</strong></p><p>在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。</p><p>当 <code>Clock</code> 组件第一次被渲染到 DOM 中的时候，就为其<code>设置一个计时器</code>。这在 React 中被称为“挂载（mount）”。</p><p>同时，当 DOM 中 <code>Clock</code> 组件被删除的时候，应该<code>清除计时器</code>。这在 React 中被称为“卸载（umount）”。</p><p>我们可以为 class 组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">1000</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Clock <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>注意</strong>:</p><ul><li><p>不要直接修改state</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Correct</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>comment<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>state的更新可能是异步的</p><p>出于性能考虑，React 可能会把多个 <code>setState()</code> 调用合并成一个调用。</p><p>因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><p>例如，此代码可能会无法更新计数器：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要解决这个问题，可以让 <code>setState()</code> 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Correct</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>state的更新会被合并</p><pre class=" language-js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>    posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    comments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      posts<span class="token punctuation">:</span> response<span class="token punctuation">.</span>posts    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fetchComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      comments<span class="token punctuation">:</span> response<span class="token punctuation">.</span>comments    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的合并是浅合并，所以 <code>this.setState({comments})</code> 完整保留了 <code>this.state.posts</code>， 但是完全替换了 <code>this.state.comments</code>。</p></li></ul></li><li><p><strong>数据是向下流动的</strong></p><p>不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。</p><p>这就是为什么称 state 为局部的或是封装的的原因。除了拥有并设置了它的组件，其他组件都无法访问。</p><p>组件可以选择把它的 state 作为 props 向下传递到它的子组件中：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>FormattedDate date<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p><code>FormattedDate</code> 组件会在其 props 中接收参数 <code>date</code>，但是组件本身无法知道它是来自于 <code>Clock</code> 的 state，或是 <code>Clock</code> 的 props，还是手动输入的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FormattedDate</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这通常会被叫做“自上而下”或是“单向”的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</p><p>如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。</p></li></ul><h2 id="5-事件处理"><a href="#5-事件处理" class="headerlink" title="5. 事件处理"></a>5. 事件处理</h2><p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:</p><ul><li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li><li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li></ul><p>例如，传统的 HTML：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activateLasers()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Activate Lasers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>在 React 中略微不同：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span>{activateLasers}</span><span class="token punctuation">></span></span>  Activate Lasers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code> 。例如，传统的 HTML 中阻止链接默认打开一个新页面，你可以这样写：</p><pre><code>&lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot;&gt;  Click me&lt;/a&gt;</code></pre><p>在 React 中，可能是这样的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The link was clicked.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>      Click me    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当你使用 <code>ES6 class</code> 语法定义一个组件的时候，通常的做法是将事件处理函数声明为 class 中的方法。例如，下面的 <code>Toggle</code> 组件会渲染一个让用户切换开关状态的按钮：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isToggleOn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为了在回调中使用 `this`，这个绑定是必不可少的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      isToggleOn<span class="token punctuation">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>isToggleOn    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isToggleOn <span class="token operator">?</span> <span class="token string">'ON'</span> <span class="token punctuation">:</span> <span class="token string">'OFF'</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Toggle <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你必须谨慎对待 JSX 回调函数中的 <code>this</code>，在 JavaScript 中，class 的方法默认不会<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener">绑定</a> <code>this</code>。如果你忘记绑定 <code>this.handleClick</code> 并把它传入了 <code>onClick</code>，当你调用这个函数的时候 <code>this</code> 的值为 <code>undefined</code>。</p><p>这并不是 React 特有的行为；这其实与 <a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/" target="_blank" rel="noopener">JavaScript 函数工作原理</a>有关。通常情况下，如果你没有在方法后面添加 <code>()</code>，例如 <code>onClick={this.handleClick}</code>，你应该为这个方法绑定 <code>this</code>。</p><p>如果觉得使用 <code>bind</code> 很麻烦，这里有两种方式可以解决。如果你正在使用实验性的 <a href="https://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="noopener">public class fields 语法</a>，你可以使用 class fields 正确的绑定回调函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">LoggingButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span>  <span class="token comment" spellcheck="true">// 注意: 这是 *实验性* 语法。</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>        Click me      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a> 默认启用此语法。</p><p>如果你没有使用 class fields 语法，你可以在回调中使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">LoggingButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>        Click me      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此语法问题在于每次渲染 <code>LoggingButton</code> 时都会创建不同的回调函数。在大多数情况下，这没什么问题，但如果该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染。我们通常建议在构造器中绑定或使用 class fields 语法来避免这类性能问题。</p><h2 id="6-条件渲染"><a href="#6-条件渲染" class="headerlink" title="6. 条件渲染"></a>6. 条件渲染</h2><p>观察下面两个组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome back<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">GuestGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Please sign up<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再创建一个 <code>Greeting</code> 组件，它会根据用户是否登录来决定显示上面的哪一个组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserGreeting <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>GuestGreeting <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// Try changing to isLoggedIn={true}:</span>  <span class="token operator">&lt;</span>Greeting isLoggedIn<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>元素变量</strong></p><p>你可以使用变量来储存元素。 它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LoginButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>      Login    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LogoutButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>      Logout    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在下面的示例中，我们将创建一个名叫 <code>LoginControl</code> 的<a href="https://react.docschina.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class" target="_blank" rel="noopener">有状态的组件</a>。</p><p>它将根据当前的状态来渲染 <code>或者</code>。同时它还会渲染上一个示例中的 ``。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLoginClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLogoutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>    <span class="token keyword">let</span> button<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token operator">&lt;</span>LogoutButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token operator">&lt;</span>LoginButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Greeting isLoggedIn<span class="token operator">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>LoginControl <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>与运算符 &amp;&amp;</strong></p><p>通过花括号包裹代码，你可以<a href="https://react.docschina.org/docs/introducing-jsx.html#embedding-expressions-in-jsx" target="_blank" rel="noopener">在 JSX 中嵌入任何表达式</a>。这也包括 JavaScript 中的逻辑与 (&amp;&amp;) 运算符。它可以很方便地进行元素的条件渲染。    </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Mailbox</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> unreadMessages <span class="token operator">=</span> props<span class="token punctuation">.</span>unreadMessages<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>          You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Mailbox unreadMessages<span class="token operator">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>三目运算符</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      The user is <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token punctuation">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span> logged <span class="token keyword">in</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>LogoutButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>LoginButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>阻止组件渲染</strong></p><p>在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染。</p><p>下面的示例中，`` 会根据 prop 中 <code>warn</code> 的值来进行条件渲染。如果 <code>warn</code> 的值是 <code>false</code>，那么组件则不会渲染:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">WarningBanner</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"warning"</span><span class="token operator">></span>      Warning<span class="token operator">!</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>showWarning<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleToggleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      showWarning<span class="token punctuation">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>showWarning    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>WarningBanner warn<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">}</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning <span class="token operator">?</span> <span class="token string">'Hide'</span> <span class="token punctuation">:</span> <span class="token string">'Show'</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Page <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="7-列表-amp-key"><a href="#7-列表-amp-key" class="headerlink" title="7. 列表&amp;key"></a>7. 列表&amp;key</h2><p><strong>渲染多个组件</strong></p><p>下面，我们使用 Javascript 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener"><code>map()</code></a> 方法来遍历 <code>numbers</code> 数组。将数组中的每个元素变成<code>&lt;li&gt;</code> 标签，最后我们将得到的数组赋值给 <code>listItems</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们把整个 <code>listItems</code> 插入到 `` 元素中，然后<a href="https://react.docschina.org/docs/rendering-elements.html#rendering-an-element-into-the-dom" target="_blank" rel="noopener">渲染进 DOM</a>：</p><pre class=" language-js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>用 key 提取组件</strong></p><p>如果你提取 出一个 <code>ListItem</code> 组件，你应该把 key 保留在数组中的这个 <code>元素上，而不是放在 `ListItem` 组件中的</code> 元素上。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 正确！这里不需要指定 key：</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// 正确！key 应该在数组的上下文中被指定</span>    <span class="token operator">&lt;</span>ListItem key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>              value<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>listItems<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>NumberList numbers<span class="token operator">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 <code>key</code> 属性的值，请用其他属性名显式传递这个值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> content <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Post    key<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span>    id<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span>    title<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面例子中，<code>Post</code> 组件可以读出 <code>props.id</code>，但是不能读出 <code>props.key</code>。</p><p><strong>在 JSX 中嵌入 map()</strong></p><p>在上面的例子中，我们声明了一个单独的 <code>listItems</code> 变量并将其包含在 JSX 中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ListItem key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>              value<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>listItems<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JSX 允许在大括号中<a href="https://react.docschina.org/docs/introducing-jsx.html#embedding-expressions-in-jsx" target="_blank" rel="noopener">嵌入任何表达式</a>，所以我们可以内联 <code>map()</code> 返回的结果：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ListItem key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                  value<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="8-表单"><a href="#8-表单" class="headerlink" title="8. 表单"></a>8. 表单</h2><p><strong>input标签</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交的名字: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          名字<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>textarea标签</strong></p><p>在 HTML 中, `` 元素通过其子元素定义其文本:</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>textarea<span class="token operator">></span>  你好， 这是在 text area 里的文本<span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span></code></pre><p>而在 React 中，<code>使用 `value` 属性代替。这样，可以使得使用</code> 的表单和使用单行 input 的表单非常类似：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">EssayForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'请撰写一篇关于你喜欢的 DOM 元素的文章.'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交的文章: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          文章<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>textarea value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>请注意，<code>this.state.value</code> 初始化于构造函数中，因此文本区域默认有初值。</p><p><strong>select标签</strong></p><p>在 HTML 中，`` 创建下拉列表标签。例如，如下 HTML 创建了水果相关的下拉列表：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"grapefruit"</span><span class="token operator">></span>葡萄柚<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"lime"</span><span class="token operator">></span>柠檬<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>  <span class="token operator">&lt;</span>option selected value<span class="token operator">=</span><span class="token string">"coconut"</span><span class="token operator">></span>椰子<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"mango"</span><span class="token operator">></span>芒果<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p>请注意，由于 <code>selected</code> 属性的缘故，椰子选项默认被选中。React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">FlavorForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token string">'coconut'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你喜欢的风味是: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          选择你喜欢的风味<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"grapefruit"</span><span class="token operator">></span>葡萄柚<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"lime"</span><span class="token operator">></span>柠檬<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"coconut"</span><span class="token operator">></span>椰子<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"mango"</span><span class="token operator">></span>芒果<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>处理多个输入</strong></p><p>当需要处理多个 <code>input</code> 元素时，我们可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。</p><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Reservation</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      isGoing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      numberOfGuests<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleInputChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> target<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'checkbox'</span> <span class="token operator">?</span> target<span class="token punctuation">.</span>checked <span class="token punctuation">:</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          参与<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>input            name<span class="token operator">=</span><span class="token string">"isGoing"</span>            type<span class="token operator">=</span><span class="token string">"checkbox"</span>            checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isGoing<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          来宾人数<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>input            name<span class="token operator">=</span><span class="token string">"numberOfGuests"</span>            type<span class="token operator">=</span><span class="token string">"number"</span>            value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numberOfGuests<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="9-状态提升"><a href="#9-状态提升" class="headerlink" title="9. 状态提升"></a>9. 状态提升</h2><p>多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。</p><p>我们将创建一个用于计算水在给定温度下是否会沸腾的温度计算器。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">BoilingVerdict</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>celsius <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>The water would boil<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>The water would not boil<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们将编写两个可以在摄氏度与华氏度之间相互转换的函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">toCelsius</span><span class="token punctuation">(</span>fahrenheit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>fahrenheit <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toFahrenheit</span><span class="token punctuation">(</span>celsius<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>celsius <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>input 组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TemperatureInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onTemperatureChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>fieldset<span class="token operator">></span>        <span class="token operator">&lt;</span>legend<span class="token operator">></span>Enter temperature <span class="token keyword">in</span> <span class="token punctuation">{</span>scaleNames<span class="token punctuation">[</span>scale<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>legend<span class="token operator">></span>        <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span>               onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>fieldset<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>计算组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>temperature<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleCelsiusChange</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>scale<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span> temperature<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleFahrenheitChange</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>scale<span class="token punctuation">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span> temperature<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> celsius <span class="token operator">=</span> scale <span class="token operator">===</span> <span class="token string">'f'</span> <span class="token operator">?</span> <span class="token function">tryConvert</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> toCelsius<span class="token punctuation">)</span> <span class="token punctuation">:</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> fahrenheit <span class="token operator">=</span> scale <span class="token operator">===</span> <span class="token string">'c'</span> <span class="token operator">?</span> <span class="token function">tryConvert</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> toFahrenheit<span class="token punctuation">)</span> <span class="token punctuation">:</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>TemperatureInput          scale<span class="token operator">=</span><span class="token string">"c"</span>          temperature<span class="token operator">=</span><span class="token punctuation">{</span>celsius<span class="token punctuation">}</span>          onTemperatureChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TemperatureInput          scale<span class="token operator">=</span><span class="token string">"f"</span>          temperature<span class="token operator">=</span><span class="token punctuation">{</span>fahrenheit<span class="token punctuation">}</span>          onTemperatureChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>BoilingVerdict          celsius<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>celsius<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>让我们来重新梳理一下当你对输入框内容进行编辑时会发生些什么：</p><ul><li>React 会调用 DOM 中 `` 的 <code>onChange</code> 方法。在本实例中，它是 <code>TemperatureInput</code> 组件的 <code>handleChange</code> 方法。</li><li><code>TemperatureInput</code> 组件中的 <code>handleChange</code> 方法会调用 <code>this.props.onTemperatureChange()</code>，并传入新输入的值作为参数。其 props 诸如 <code>onTemperatureChange</code> 之类，均由父组件 <code>Calculator</code> 提供。</li><li>起初渲染时，用于摄氏度输入的子组件 <code>TemperatureInput</code> 中 <code>onTemperatureChange</code> 方法为 <code>Calculator</code> 组件中的 <code>handleCelsiusChange</code> 方法，而，用于华氏度输入的子组件 <code>TemperatureInput</code> 中的 <code>onTemperatureChange</code> 方法为 <code>Calculator</code> 组件中的 <code>handleFahrenheitChange</code> 方法。因此，无论哪个输入框被编辑都会调用 <code>Calculator</code> 组件中对应的方法。</li><li>在这些方法内部，<code>Calculator</code> 组件通过使用新的输入值与当前输入框对应的温度计量单位来调用 <code>this.setState()</code> 进而请求 React 重新渲染自己本身。</li><li>React 调用 <code>Calculator</code> 组件的 <code>render</code> 方法得到组件的 UI 呈现。温度转换在这时进行，两个输入框中的数值通过当前输入温度和其计量单位来重新计算获得。</li><li>React 使用 <code>Calculator</code> 组件提供的新 props 分别调用两个 <code>TemperatureInput</code> 子组件的 <code>render</code> 方法来获取子组件的 UI 呈现。</li><li>React 调用 <code>BoilingVerdict</code> 组件的 <code>render</code> 方法，并将摄氏温度值以组件 props 方式传入。</li><li>React DOM 根据输入值匹配水是否沸腾，并将结果更新至 DOM。我们刚刚编辑的输入框接收其当前值，另一个输入框内容更新为转换后的温度值。</li></ul><h2 id="10-组合vs继承"><a href="#10-组合vs继承" class="headerlink" title="10. 组合vs继承"></a>10. 组合vs继承</h2><p>React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。</p><p>有些组件无法提前知晓它们子组件的具体内容。在 <code>Sidebar</code>（侧边栏）和 <code>Dialog</code>（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。</p><p>我们建议这些组件使用一个特殊的 <code>children</code> prop 来将他们的子组件传递到渲染结果中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FancyBorder</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'FancyBorder FancyBorder-'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这使得别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"Dialog-title"</span><span class="token operator">></span>        Welcome      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"Dialog-message"</span><span class="token operator">></span>        Thank you <span class="token keyword">for</span> visiting our spacecraft<span class="token operator">!</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>特例关系</strong></p><p>有些时候，我们会把一些组件看作是其他组件的特殊实例，比如 <code>WelcomeDialog</code> 可以说是 <code>Dialog</code> 的特殊实例。</p><p>在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"Dialog-title"</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"Dialog-message"</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Dialog      title<span class="token operator">=</span><span class="token string">"Welcome"</span>      message<span class="token operator">=</span><span class="token string">"Thank you for visiting our spacecraft!"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="11-组件实例"><a href="#11-组件实例" class="headerlink" title="11.  组件实例"></a>11.  组件实例</h2><p>本次实例将引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产品数据表格来更深刻地领会 React 哲学。</p><p><img src="https://react.docschina.org/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png" alt="Mockup"></p><h3 id="第一步：将设计好的-UI-划分为组件层级"><a href="#第一步：将设计好的-UI-划分为组件层级" class="headerlink" title="第一步：将设计好的 UI 划分为组件层级"></a>第一步：将设计好的 UI 划分为组件层级</h3><p><img src="https://react.docschina.org/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png" alt="Component diagram"></p><ol><li><strong>FilterableProductTable (橙色):</strong> 是整个示例应用的整体</li><li><strong>SearchBar (蓝色):</strong> 接受所有的<em>用户输入</em></li><li><strong>ProductTable (绿色):</strong> 展示<em>数据内容</em>并根据<em>用户输入</em>筛选结果</li><li><strong>ProductCategoryRow (天蓝色):</strong> 为每一个<em>产品类别</em>展示标题</li><li><strong>ProductRow (红色):</strong> 每一行展示一个<em>产品</em></li></ol><p>现在我们已经确定了设计稿中应该包含的组件，接下来我们将把它们描述为更加清晰的层级。设计稿中被其他组件包含的子组件，在层级上应该作为其子节点。</p><p><code>FilterableProductTable</code></p><ul><li><code>SearchBar</code></li><li><code>ProductTable</code><ul><li><code>ProductCategoryRow</code></li><li><code>ProductRow</code></li></ul></li></ul><h3 id="第二步：用-React-创建一个静态版本"><a href="#第二步：用-React-创建一个静态版本" class="headerlink" title="第二步：用 React 创建一个静态版本"></a>第二步：用 React 创建一个静态版本</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ProductCategoryRow</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> category <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>category<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>th colSpan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>          <span class="token punctuation">{</span>category<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductRow</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>product<span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> product<span class="token punctuation">.</span>stocked <span class="token operator">?</span>      product<span class="token punctuation">.</span>name <span class="token punctuation">:</span>      <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductTable</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lastCategory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>category <span class="token operator">!==</span> lastCategory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token operator">&lt;</span>ProductCategoryRow            category<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>category<span class="token punctuation">}</span>            key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>category<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>ProductRow          product<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span>          key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      lastCategory <span class="token operator">=</span> product<span class="token punctuation">.</span>category<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span>thead<span class="token operator">></span>          <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>Price<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>        <span class="token operator">&lt;</span>tbody<span class="token operator">></span><span class="token punctuation">{</span>rows<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SearchBar</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Search..."</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">}</span>          Only show products <span class="token keyword">in</span> stock        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FilterableProductTable</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>SearchBar <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ProductTable products<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>products<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PRODUCTS <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$49.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Football'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$9.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Baseball'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$29.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Basketball'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$99.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'iPod Touch'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$399.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'iPhone 5'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$199.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Nexus 7'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>FilterableProductTable products<span class="token operator">=</span><span class="token punctuation">{</span>PRODUCTS<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第三步：确定-UI-state-的最小（且完整）表示"><a href="#第三步：确定-UI-state-的最小（且完整）表示" class="headerlink" title="第三步：确定 UI state 的最小（且完整）表示"></a>第三步：确定 UI state 的最小（且完整）表示</h3><p>想要使你的 UI 具备交互功能，需要有触发基础数据模型改变的能力。React 通过 <strong>state</strong> 来完成这个任务。</p><p>为了正确地构建应用，你首先需要找出应用所需的 state 的最小表示，并根据需要计算出其他所有数据。只保留应用所需的可变 state 的最小集合，其他数据均由它们计算产生。比如，你要编写一个任务清单应用，你只需要保存一个包含所有事项的数组，而无需额外保存一个单独的 state 变量（用于存储任务个数）。当你需要展示任务个数时，只需要利用该数组的 length 属性即可。</p><p>通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：</p><ol><li>该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。</li><li>该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。</li><li>你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。</li></ol><h3 id="第四步：确定-state-放置的位置"><a href="#第四步：确定-state-放置的位置" class="headerlink" title="第四步：确定 state 放置的位置"></a>第四步：确定 state 放置的位置</h3><p>注意：React 中的数据流是单向的，并顺着组件层级从上往下传递。哪个组件应该拥有某个 state 这件事，对初学者来说往往是最难理解的部分。尽管这可能在一开始不是那么清晰，但你可以尝试通过以下步骤来判断：</p><p>对于应用中的每一个 state：</p><ul><li>找到根据这个 state 进行渲染的所有组件。</li><li>找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。</li><li>该共同所有者组件或者比它层级更高的组件应该拥有该 state。</li><li>如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。</li></ul><h3 id="第五步：添加反向数据流"><a href="#第五步：添加反向数据流" class="headerlink" title="第五步：添加反向数据流"></a>第五步：添加反向数据流</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ProductCategoryRow</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> category <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>category<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>th colSpan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>          <span class="token punctuation">{</span>category<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductRow</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>product<span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> product<span class="token punctuation">.</span>stocked <span class="token operator">?</span>      product<span class="token punctuation">.</span>name <span class="token punctuation">:</span>      <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductTable</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> filterText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>filterText<span class="token punctuation">;</span>    <span class="token keyword">const</span> inStockOnly <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>inStockOnly<span class="token punctuation">;</span>    <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lastCategory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>filterText<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>inStockOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>product<span class="token punctuation">.</span>stocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span>category <span class="token operator">!==</span> lastCategory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token operator">&lt;</span>ProductCategoryRow            category<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>category<span class="token punctuation">}</span>            key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>category<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      rows<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>ProductRow          product<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span>          key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      lastCategory <span class="token operator">=</span> product<span class="token punctuation">.</span>category<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span>thead<span class="token operator">></span>          <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span>Price<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>        <span class="token operator">&lt;</span>tbody<span class="token operator">></span><span class="token punctuation">{</span>rows<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SearchBar</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleFilterTextChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onFilterTextChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleInStockChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onInStockChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"text"</span>          placeholder<span class="token operator">=</span><span class="token string">"Search..."</span>          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span>input            type<span class="token operator">=</span><span class="token string">"checkbox"</span>            checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>inStockOnly<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange<span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">}</span>          Only show products <span class="token keyword">in</span> stock        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FilterableProductTable</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      filterText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      inStockOnly<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleFilterTextChange</span><span class="token punctuation">(</span>filterText<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filterText<span class="token punctuation">:</span> filterText    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleInStockChange</span><span class="token punctuation">(</span>inStockOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      inStockOnly<span class="token punctuation">:</span> inStockOnly    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>SearchBar          filterText<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span>          inStockOnly<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inStockOnly<span class="token punctuation">}</span>          onFilterTextChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleFilterTextChange<span class="token punctuation">}</span>          onInStockChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInStockChange<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ProductTable          products<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>products<span class="token punctuation">}</span>          filterText<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span>          inStockOnly<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inStockOnly<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PRODUCTS <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$49.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Football'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$9.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Baseball'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Sporting Goods'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$29.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Basketball'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$99.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'iPod Touch'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$399.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'iPhone 5'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token punctuation">:</span> <span class="token string">'Electronics'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">'$199.99'</span><span class="token punctuation">,</span> stocked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Nexus 7'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>FilterableProductTable products<span class="token operator">=</span><span class="token punctuation">{</span>PRODUCTS<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>本文总结参考<a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener">react官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js工厂模式</title>
      <link href="/2019/12/23/js-she-ji-mo-shi-jian-dan-gong-han-mo-shi/"/>
      <url>/2019/12/23/js-she-ji-mo-shi-jian-dan-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="js设计模式（工厂模式）"><a href="#js设计模式（工厂模式）" class="headerlink" title="js设计模式（工厂模式）"></a>js设计模式（工厂模式）</h1><p>将许多类封装在一个函数里，然后通过这个函数可以创建我需要的对象。这种函数通常被称为工厂函数，这种模式通常被称作工厂模式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Basketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">'我是一个篮球'</span><span class="token punctuation">}</span>Basketball<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每个队伍需要5名队员'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'篮球很大'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Football</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">'我是一个足球'</span><span class="token punctuation">}</span>Football<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每个队伍需要11名队员'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'足球很大'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Tennis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">'我是一个窝囊求'</span><span class="token punctuation">}</span>Tennis<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每个队伍需要1名队员'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'网球很小'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SportsFaactory</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'basketball'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Basketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'football'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Football</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'tennis'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tennis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> basketball <span class="token operator">=</span> <span class="token function">SportsFaactory</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span><span class="token keyword">var</span> football <span class="token operator">=</span> <span class="token function">SportsFaactory</span><span class="token punctuation">(</span><span class="token string">'football'</span><span class="token punctuation">)</span><span class="token keyword">var</span> tennis <span class="token operator">=</span> <span class="token function">SportsFaactory</span><span class="token punctuation">(</span><span class="token string">'tennis'</span><span class="token punctuation">)</span>basketball<span class="token punctuation">.</span><span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>football<span class="token punctuation">.</span><span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tennis<span class="token punctuation">.</span><span class="token function">getBallSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原理题总结</title>
      <link href="/2019/12/23/js-yuan-li-ti-zong-jie/"/>
      <url>/2019/12/23/js-yuan-li-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="js原理题总结"><a href="#js原理题总结" class="headerlink" title="js原理题总结"></a>js原理题总结</h1><h2 id="1-实现一个call函数"><a href="#1-实现一个call函数" class="headerlink" title="1. 实现一个call函数"></a>1. 实现一个call函数</h2><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mycall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token operator">!==</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not function'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result <span class="token punctuation">}</span></code></pre><h2 id="2-实现一个apply函数"><a href="#2-实现一个apply函数" class="headerlink" title="2. 实现一个apply函数"></a>2. 实现一个apply函数</h2><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myapply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token operator">!==</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'not function'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result   <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result <span class="token punctuation">}</span></code></pre><h2 id="3-实现一个bind函数"><a href="#3-实现一个bind函数" class="headerlink" title="3. 实现一个bind函数"></a>3. 实现一个bind函数</h2><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mybind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'funciton'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeErrorr</span><span class="token punctuation">(</span><span class="token string">'not function'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>   <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-instanceof原理"><a href="#4-instanceof原理" class="headerlink" title="4. instanceof原理"></a>4. instanceof原理</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftValue <span class="token operator">===</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    leftValue <span class="token operator">=</span> rightValue<span class="token punctuation">.</span>__proto__  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5-Object-create的基本实现原理"><a href="#5-Object-create的基本实现原理" class="headerlink" title="5. Object.create的基本实现原理"></a>5. Object.create的基本实现原理</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="6-new本质"><a href="#6-new本质" class="headerlink" title="6. new本质"></a>6. new本质</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>      __proto__<span class="token punctuation">:</span>fun<span class="token punctuation">.</span>prototype    <span class="token punctuation">}</span>    fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>age <span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><h2 id="7-实现一个基本的promise"><a href="#7-实现一个基本的promise" class="headerlink" title="7. 实现一个基本的promise"></a>7. 实现一个基本的promise</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'pending'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> undefined    <span class="token keyword">let</span> resolve <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'pedding'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'fulfilled'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> reject <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'rejected'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">'fulfilled'</span><span class="token punctuation">:</span>  <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">'rejected'</span><span class="token punctuation">:</span>  <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="8-实现浅拷贝"><a href="#8-实现浅拷贝" class="headerlink" title="8. 实现浅拷贝"></a>8. 实现浅拷贝</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. ...实现</span><span class="token keyword">let</span> copy1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. Object.assign实现</span><span class="token keyword">let</span> copy2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="9-实现一个基本的深拷贝"><a href="#9-实现一个基本的深拷贝" class="headerlink" title="9. 实现一个基本的深拷贝"></a>9. 实现一个基本的深拷贝</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. JOSN.stringify()/JSON.parse()</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 递归拷贝</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> copy <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> copy<span class="token punctuation">}</span></code></pre><h2 id="10-使用setTimeOut模拟setInterval"><a href="#10-使用setTimeOut模拟setInterval" class="headerlink" title="10. 使用setTimeOut模拟setInterval"></a>10. 使用setTimeOut模拟setInterval</h2><pre class=" language-js"><code class="language-js">setTimeout <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span>  setTimeout <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><h2 id="11-js实现一个继承方法-借用构造函数继承实例属性"><a href="#11-js实现一个继承方法-借用构造函数继承实例属性" class="headerlink" title="11. js实现一个继承方法// 借用构造函数继承实例属性"></a>11. js实现一个继承方法// 借用构造函数继承实例属性</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Child <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 寄生继承原型属性</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> Super <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Super<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Parent<span class="token punctuation">.</span>prototype  Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="12-实现一个基本的Event-Bus"><a href="#12-实现一个基本的Event-Bus" class="headerlink" title="12. 实现一个基本的Event Bus"></a>12. 实现一个基本的Event Bus</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件通信，一个触发与监听的过程</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 监听事件</span>  addListener <span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 触发事件</span>  emit <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    handle<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>emitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> age <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'ages'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 18</span></code></pre><h2 id="13-实现一个双向数据绑定"><a href="#13-实现一个双向数据绑定" class="headerlink" title="13. 实现一个双向数据绑定"></a>13. 实现一个双向数据绑定</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据了'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据更新了'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newVal  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="14-实现一个简单路由"><a href="#14-实现一个简单路由" class="headerlink" title="14. 实现一个简单路由"></a>14. 实现一个简单路由</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Route</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 路由存储对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前hash</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">// 绑定this，避免监听时this指向改变</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>freshRoute<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 存储</span>  storeRoute <span class="token punctuation">(</span>path<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> cb <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 更新</span>  freshRoute <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentHash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentHash<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="15-实现懒加载"><a href="#15-实现懒加载" class="headerlink" title="15. 实现懒加载"></a>15. 实现懒加载</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/1.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/2.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/3.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/4.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/5.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/6.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/7.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/8.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/9.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./imgs/default.png"</span> data<span class="token operator">=</span><span class="token string">"./imgs/10.png"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token keyword">let</span> imgs <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可视区高度</span><span class="token keyword">let</span> clientHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token keyword">function</span> lazyLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 滚动卷去的高度</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到图片顶部距离可视区顶部的距离</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> clientHeight <span class="token operator">+</span> scrollTop <span class="token operator">-</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop    <span class="token comment" spellcheck="true">// 图片在可视区内</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> clientHeight<span class="token operator">+</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>      imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>lazyLoad<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h2 id="16-rem实现原理"><a href="#16-rem实现原理" class="headerlink" title="16. rem实现原理"></a>16. rem实现原理</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> setRem <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token keyword">let</span> width <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width  <span class="token comment" spellcheck="true">// 假设设计稿为宽750，则rem为10px</span>  <span class="token keyword">let</span> rem <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">75</span>  doc<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">}</span></code></pre><h2 id="17-手写实现AJAX"><a href="#17-手写实现AJAX" class="headerlink" title="17. 手写实现AJAX"></a>17. 手写实现AJAX</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 简单实现</span><span class="token comment" spellcheck="true">// 实例化</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 初始化</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置状态变化回调处理请求结果</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyStatus <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. 基于promise实现</span><span class="token keyword">function</span> ajax <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 请求地址</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> options<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">// 请求方法</span>  <span class="token keyword">const</span> method <span class="token operator">=</span> options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'get'</span>  <span class="token comment" spellcheck="true">// 默认为异步true</span>  <span class="token keyword">const</span> <span class="token keyword">async</span> <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token keyword">async</span>  <span class="token comment" spellcheck="true">// 请求参数</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> options<span class="token punctuation">.</span>data  <span class="token comment" spellcheck="true">// 实例化</span>  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 请求超时</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> options<span class="token punctuation">.</span>timeout  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回一个Promise实例</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求超时'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监听状态变化回调</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 200-300 之间表示请求成功，304资源未变，取缓存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          resolve <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 错误回调</span>    xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> reject <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">let</span> paramArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> encodeData    <span class="token comment" spellcheck="true">// 处理请求参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数拼接需要通过 encodeURIComponent 进行编码</span>        paramArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      encodeData <span class="token operator">=</span> paramArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get请求拼接参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 检测url中是否已存在 ? 及其位置</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> url<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span>      <span class="token comment" spellcheck="true">// 拼接url</span>      url <span class="token operator">+</span><span class="token operator">=</span> encodeData    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发送请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// post 方式需要设置请求头</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">)</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>encodeData<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="18-实现拖拽"><a href="#18-实现拖拽" class="headerlink" title="18. 实现拖拽"></a>18. 实现拖拽</h2><pre class=" language-js"><code class="language-js"> window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// drag处于绝对定位状态</span>  <span class="token keyword">let</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>  drag<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event    <span class="token comment" spellcheck="true">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span>    <span class="token keyword">let</span> diffX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetLeft    <span class="token keyword">let</span> diffY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetTop    drag<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> diffX      <span class="token keyword">let</span> top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> diffY      <span class="token comment" spellcheck="true">// 避免拖拽出可视区</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetWidth      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> drag<span class="token punctuation">.</span>offsetHeight      <span class="token punctuation">}</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">'px'</span>      drag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    drag<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="19-实现一个节流函数"><a href="#19-实现一个节流函数" class="headerlink" title="19. 实现一个节流函数"></a>19. 实现一个节流函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> throttle <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存时间</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> prev <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>      prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'节流'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="20-实现一个防抖函数"><a href="#20-实现一个防抖函数" class="headerlink" title="20. 实现一个防抖函数"></a>20. 实现一个防抖函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> debounce <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 利用闭包保存定时器</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> arg <span class="token operator">=</span> arguments    <span class="token comment" spellcheck="true">// 在规定时间内再次触发会先清除定时器后再重设定时器</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'防抖'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承</title>
      <link href="/2019/12/23/js-ji-cheng/"/>
      <url>/2019/12/23/js-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h1><p>  <strong>类式继承</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'swim'</span><span class="token punctuation">,</span><span class="token string">'smoke'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sonName <span class="token operator">=</span> <span class="token string">'wang'</span>  <span class="token punctuation">}</span>  Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>sonName<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span></code></pre><p>  类式继承有个致命的缺点，当其中一个实例被修改时候，另一个实例也跟着对应的修改了,</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> son2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  son2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">)</span>  son<span class="token punctuation">.</span>hobby <span class="token comment" spellcheck="true">// ['swim','smoke','sleep']</span></code></pre><p>  <strong>构造函数继承</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'javascript'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showBooks <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> instatncel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">var</span> instance2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  instancel<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//['javascript','html','css','vue']</span>  instance2<span class="token punctuation">.</span>books <span class="token comment" spellcheck="true">//[javascript,html,css]</span>  instancel<span class="token punctuation">.</span><span class="token function">showBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//typeError</span></code></pre><p>  由于call方法可以更改函数的作用环境，因此在子类中，对superclass调用这个方法就是将子类中的变量在父类中执行一遍，但是这种类型的继承没有设计原型prototype，所有父类的原型方法自然不会被子类继承。</p><p>  <strong>组合继承</strong></p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'css'</span><span class="token punctuation">,</span>      <span class="token string">'javascript'</span><span class="token punctuation">,</span>      <span class="token string">'html'</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id  <span class="token punctuation">}</span>  SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//['css','javascript','html','vue']</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//['css','javascript','html']</span>  instance1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//'zhangsan'</span></code></pre><p>  组合模式就是将这两点的优势结合起来。</p><p>  <strong>原型式继承</strong></p><p>  ​</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 优雅写法总结</title>
      <link href="/2019/12/23/js-you-ya-xie-fa-zong-jie/"/>
      <url>/2019/12/23/js-you-ya-xie-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="js优雅写法"><a href="#js优雅写法" class="headerlink" title="js优雅写法"></a>js优雅写法</h1><ul><li><p>封装多个函数</p><p>传统写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>优雅写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> checkType <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>addCheck <span class="token operator">=</span> <span class="token punctuation">(</span>type <span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> check <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">checkType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">addCheck</span><span class="token punctuation">(</span><span class="token string">'checkName'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is checkName'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCheck</span><span class="token punctuation">(</span><span class="token string">'checkPsw'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is checkPsw'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">checkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkPsw</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2019/12/23/git/"/>
      <url>/2019/12/23/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的相关知识点"><a href="#Git的相关知识点" class="headerlink" title="Git的相关知识点"></a>Git的相关知识点</h1><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><ul><li>git reset 的作用是修改HEAD的位置，即将HEAD指向的位置 改变为之前存在的某个版本，如果想恢复到之前的某个提交的版本，且那个版本之后的提交的版本不要了，可以使用。</li><li>是比较强硬的回退，如果没有提交到远程仓库可以使用</li></ul><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><ul><li>git revert 的作用通过反做创建一个新的版本，如果我们想恢复之前的某一个版本，但是又想保留该目标版本后面的版本，记录下整个版本变动的流程，就可以使用这种方法。</li><li>常用于提交到远程仓库的回滚，生成一次新的提交</li></ul><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><ul><li>git branch 分支相关的操作，可用于吃查看，新建，删除分支以及分支重命名操作</li></ul><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><ul><li>用于对比两次修改的差异 可以通过自定义参数来指定对比哪两次修改</li></ul><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><ul><li>用于合并分支或者某次提交 一般用于将分支或修改的内容合并到master上</li></ul><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><ul><li>用于将修改的文件添加到暂存区</li><li><code>git add .</code>会把所有的文件都加入到暂存区 <strong>忽略.gitignore</strong></li></ul><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><ul><li>将暂存区的代码提交到代码库</li><li><code>git commit -m&#39;提交信息</code></li></ul><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><ul><li><p>显示从最近到最远的提交日志，可以看到最近的三次提交</p></li><li><p><code>git log --pretty=oneline</code>如果嫌输入的信息太多，</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中打乱数组排序</title>
      <link href="/2019/12/23/javascript-zhong-da-luan-shu-zu-sui-ji-pai-xu/"/>
      <url>/2019/12/23/javascript-zhong-da-luan-shu-zu-sui-ji-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript中打乱数组排序"><a href="#JavaScript中打乱数组排序" class="headerlink" title="JavaScript中打乱数组排序"></a>JavaScript中打乱数组排序</h1><ul><li><p>利用sort()函数</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><p>但是这种排序由于v8引擎中针对短数组和长数组使用了不同的排序方法。并且sort方法中对于同一组a,b值需要总是返回相同的值。</p></li><li><p>Fisher-Yates shuffle(洗牌算法)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> targetIdx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>targetIdx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>targetIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">}</span></code></pre><p>如果要将数组随机排序，目前而言，Fisher–Yates shuffle 算法应该是最好的选择。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> alg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="/2019/12/23/flex-dan-xing-bu-ju/"/>
      <url>/2019/12/23/flex-dan-xing-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h1><p>flex 弹性盒子模型声明 <code>display:flex</code>，那么这个元素就成为了弹性容器，具有flex弹性布局的特性。</p><ol><li>每个弹性容器都有两根轴：<strong>主轴和交叉轴</strong>，两轴之间成90度关系。注意：<strong>水平的不一定就是主轴。</strong></li><li>每根轴都有<strong>起点和终点</strong>，这对于元素的对齐非常重要。</li><li>弹性容器中的所有子元素称为&lt;弹性元素&gt;，<strong>弹性元素永远沿主轴排列</strong>。</li><li>弹性元素也可以通过<code>display:flex</code>设置为另一个弹性容器，形成嵌套关系。因此<strong>一个元素既可以是弹性容器也可以是弹性元素</strong>。</li></ol><p><strong>容器属性</strong></p><ul><li>flex-flow</li><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>algin-content</li></ul><p><strong>元素属性</strong></p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装相关的服务器文件</title>
      <link href="/2019/12/23/1-an-zhuang-xiang-guan-de-fu-wu-qi-wen-jian/"/>
      <url>/2019/12/23/1-an-zhuang-xiang-guan-de-fu-wu-qi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装相关的服务器文件"><a href="#1-安装相关的服务器文件" class="headerlink" title="1 安装相关的服务器文件"></a>1 安装相关的服务器文件</h3><ul><li>apache-tomcat</li><li>jdk      windows/linux具体看服务器是什么</li><li>putty    对远程服务器进行操作</li><li>FileZilla   对服务器文件进行copy </li></ul><h3 id="2-FileZilla"><a href="#2-FileZilla" class="headerlink" title="2 FileZilla"></a>2 FileZilla</h3><ul><li>输入主机地址，用户名，密码进行登录（密码一般是服务器注册是输入的密码）</li><li>进行文件的上传</li></ul><h3 id="3-putty"><a href="#3-putty" class="headerlink" title="3 putty"></a>3 putty</h3><ul><li>进入远程服务器</li><li>输入账号密码进行登录</li><li><code>ll</code>查看文件目录</li></ul><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><ul><li>打包自己的项目，例如vue项目<code>npm run build</code>将打包好的dist解压放在服务器中tomcat下的webapps下</li><li>解压自己的项目</li><li>.tar.gz的解压命令为<code>tar -zxvf</code>加文件名</li></ul><ul><li>.zip的解压命令为<code>unzip</code>加文件名，<strong>提示</strong>一般linux中没有unzip的命令 需<code>apt-get install unzip</code></li></ul><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li>一般项目放在/user/local下</li><li>需要在阿里云服务器上开放端口8080</li><li>需要配置环境变量 <code>vi /etc/profile</code></li><li>从网上拉取文件的命令<code>wget 加地址</code></li><li><code>source /etc/profile</code>使配置立即生效</li></ul><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><ul><li>下载对应的版本</li><li>做软连接</li></ul>]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serve </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
